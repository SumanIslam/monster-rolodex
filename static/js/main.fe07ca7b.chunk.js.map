{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","Props","monsters","map","monster","SearchBox","handleChange","type","placeholder","onChange","App","state","searchField","e","setState","target","value","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAUeA,EAPF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,GAAhB,OACX,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAA1B,aAAyCG,IAAKL,IACtD,6BAAKA,IACL,4BAAIC,QCKOK,G,MARE,SAACC,GAAD,OACf,qBAAKJ,UAAU,YAAf,SACGI,EAAMC,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAAuBR,GAAIQ,EAAQR,GAAIF,KAAMU,EAAQV,KAAMC,MAAOS,EAAQT,OAA/DS,EAAQR,WCEVS,G,MANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OAChB,8BACE,uBAAOT,UAAU,SAASU,KAAK,SAASC,YAAY,kBAAkBC,SAAUH,QC+BrEI,E,4MA5BbC,MAAQ,CAAET,SAAU,GAAIU,YAAa,I,EAQrCN,aAAe,SAACO,GACd,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,S,uDAPxC,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKP,SAAS,CAAEZ,SAAUmB,S,oBAO/C,WAAU,IAAD,EAC2BC,KAAKX,MAA/BT,EADD,EACCA,SAAUU,EADX,EACWA,YACZW,EAAmBrB,EAASsB,QAAO,SAACpB,GAAD,OACvCA,EAAQV,KAAK+B,cAAcC,SAASd,EAAYa,kBAGlD,OACE,sBAAK5B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWS,aAAcgB,KAAKhB,eAC9B,cAAC,EAAD,CAAUJ,SAAUqB,W,GAvBVI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fe07ca7b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nconst Card = ({ name, email, id }) => (\r\n  <div className=\"card-container\">\r\n    <img src={`https://robohash.org/${id}?set=set2`} alt={name} />\r\n    <h2>{name}</h2>\r\n    <p>{email}</p>\r\n  </div>\r\n);\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nconst CardList = (Props) => (\r\n  <div className=\"card-list\">\r\n    {Props.monsters.map((monster) => (\r\n      <Card key={monster.id} id={monster.id} name={monster.name} email={monster.email} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({ handleChange }) => (\r\n  <div>\r\n    <input className=\"search\" type=\"search\" placeholder=\"search monsters\" onChange={handleChange} />\r\n  </div>\r\n);\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\n// styles\nimport './App.css';\n// components\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\nclass App extends Component {\n  state = { monsters: [], searchField: '' };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}